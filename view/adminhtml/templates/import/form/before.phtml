<?php
/**
 * @author Tony Xavier
 * @package Armada_ProductImport
 */
?>
<?php
/** @var $block \Armada\ProductImport\Block\Adminhtml\Import\Edit\Before */
/** @var \Magento\Framework\View\Helper\SecureHtmlRenderer $secureRenderer */

$fieldNameSourceFile = \Armada\ProductImport\Model\Import::FIELD_NAME_SOURCE_FILE;
$uploaderErrorMessage = $block->escapeHtml(
    __('Content of uploaded file was changed, please re-upload the file')
);
?>

<?php $scriptString = <<<script
require([
    'jquery',
    'Magento_Ui/js/modal/alert',
    'uiRegistry',
    'prototype'
], function(jQuery, alert, uiRegistry){

//<![CDATA[
    // Temporary Class will be replaced after refactoring of import/export functionality
    varienImport = {
        /**
         * Name and ID for iframe for data POST-ing.
         * @type {string}
         */
        ifrElemName: 'import_post_target_frame',

        /**
         * Refresh loaded file last modified
         */
        refreshLoadedFileLastModified: function(e) {
            if (jQuery(e)[0].files.length > 0) {
                this.loadedFileLastModified = jQuery(e)[0].files[0].lastModified;
            } else {
                this.loadedFileLastModified = null;
            }
        },

        /**
         * Post form data to dynamic iframe.
         * @param {string} newActionUrl OPTIONAL Change form action to this if specified
         */
        postToFrame: function(newActionUrl) {
            var fileUploader = document.getElementById('{$fieldNameSourceFile}');

            if (fileUploader.files.length > 0) {
                var file = fileUploader.files[0],
                    ifrElName = this.ifrElemName,
                    reader = new FileReader();

                reader.readAsText(file, "UTF-8");

                reader.onerror = function () {
                    jQuery('body').loader('hide');
                    alert({
                        content: '{$uploaderErrorMessage}'
                    });
                    fileUploader.value = null;
                    jQuery('iframe#' + ifrElName).remove();
                    return;
                }

                if (file.lastModified !== this.loadedFileLastModified) {
                    alert({
                        content: '{$uploaderErrorMessage}'
                    });
                    fileUploader.value = null;
                    return;
                }
            }

            if (!jQuery('[name="' + this.ifrElemName + '"]').length) {
                jQuery('body').append('<iframe name="' + this.ifrElemName + '" id="' + this.ifrElemName + '"/>');
                jQuery('iframe#' + this.ifrElemName).attr('display', 'none');
            }
            jQuery('body')
                .loader({
                    icon: jQuery('#loading_mask_loader img').attr('src')
                })
                .loader('show');
            var form = jQuery('#edit_form')
                .one('invalid-form.validate', function(e){jQuery('body').loader('hide')});

            newActionUrl = (newActionUrl ? newActionUrl : form.attr('action'));
            if (newActionUrl.lastIndexOf('form_key') === -1) {
                newActionUrl = newActionUrl +
                    (newActionUrl.lastIndexOf('?') !== -1 ? '&' : '?') +
                    'form_key=' + encodeURIComponent(form.find('[name="form_key"]').val());
            }

            form.trigger('save', [{
                action: newActionUrl,
                target: this.ifrElemName
            }]);
        },

        /**
         * Actions after data post complete. Hide load mask, remove iframe, run response processing method.
         * @param {Object} response
         */
        postToFrameComplete: function(response) {
            jQuery('body').loader('hide');
            jQuery('#' + this.ifrElemName).remove();
            this.postToFrameProcessResponse(response);
        },

        /**
         * Process response JSON.
         * @param {Object} response
         */
        postToFrameProcessResponse: function(response) {
            if ('object' != typeof(response)) {
                alert({
                    content: '{$block->escapeHtml(__('Invalid response'))}'
                });

                return false;
            }

            \$H(response).each(function(pair) {
                switch (pair.key) {
                    case 'refresh':
                        uiRegistry.get('index = '+pair.value).source.reload({'refresh': true})
                        break;
                    case 'show':
                    case 'clear':
                    case 'hide':
                        \$H(pair.value).each(function(val) {
                            if ($(val.value)) {
                                $(val.value)[pair.key]();
                            }
                        });
                        break;
                    case 'innerHTML':
                    case 'value':
                        \$H(pair.value).each(function(val) {
                            var el = $(val.key);
                            if (el) {
                                el[pair.key] = val.value;
                                // if element does not visible
                                el.offsetWidth || el.up('div.entry-edit').show();
                            }
                        });
                        break;
                    case 'removeClassName':
                    case 'addClassName':
                        \$H(pair.value).each(function(val) {
                            if ($(val.key)) $(val.key)[pair.key](val.value);
                        });
                        break;
                    default:
                        alert({
                            content: pair.key + ': ' + pair.value
                        });
                        break;
                }
            });
        },

        /**
         * Send form data to Start action when file is validated.
         * @param {string} newActionUrl
         * @param {string} sourceFileField
         */
        startImport: function(newActionUrl, sourceFileField) {
            jQuery('#' + sourceFileField).removeClass('required-entry');
            this.postToFrame(newActionUrl);
            jQuery('#' + sourceFileField).addClass('required-entry');
        }
    };
//]]>

});
script;
?>
<?= /* @noEscape */ $secureRenderer->renderTag('script', [], $scriptString, false) ?>
